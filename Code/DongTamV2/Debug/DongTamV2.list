
DongTamV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000074  08003824  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  08003824  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001511a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9d  00000000  00000000  000351b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954f  00000000  00000000  0003a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ebb  00000000  00000000  00053cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d9c  00000000  00000000  00069bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  000ff9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080036d8 	.word	0x080036d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080036d8 	.word	0x080036d8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fbb3 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f823 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f917 	bl	80003c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000192:	f000 f85b 	bl	800024c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000196:	f000 f887 	bl	80002a8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f8bd 	bl	8000318 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019e:	f000 f8e5 	bl	800036c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a2:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <main+0x4c>)
 80001a4:	1d3c      	adds	r4, r7, #4
 80001a6:	461d      	mov	r5, r3
 80001a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 ffb7 	bl	800212c <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <main+0x50>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 ffab 	bl	800211e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>
 80001ca:	bf00      	nop
 80001cc:	080036fc 	.word	0x080036fc
 80001d0:	20000478 	.word	0x20000478

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f003 f9b2 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000202:	2300      	movs	r3, #0
 8000204:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	4618      	mov	r0, r3
 800020c:	f000 ff7c 	bl	8001108 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000216:	f000 f96d 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f9ea 	bl	800160c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023e:	f000 f959 	bl	80004f4 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_I2C1_Init+0x50>)
 8000252:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <MX_I2C1_Init+0x54>)
 8000254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_I2C1_Init+0x50>)
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_I2C1_Init+0x58>)
 800025a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_I2C1_Init+0x50>)
 800026a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_I2C1_Init+0x50>)
 800028a:	f000 fdf9 	bl	8000e80 <HAL_I2C_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000294:	f000 f92e 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000344 	.word	0x20000344
 80002a0:	40005400 	.word	0x40005400
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <MX_SPI2_Init+0x68>)
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <MX_SPI2_Init+0x6c>)
 80002b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_SPI2_Init+0x68>)
 80002b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <MX_SPI2_Init+0x68>)
 80002bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <MX_SPI2_Init+0x68>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_SPI2_Init+0x68>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_SPI2_Init+0x68>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_SPI2_Init+0x68>)
 80002d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_SPI2_Init+0x68>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_SPI2_Init+0x68>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_SPI2_Init+0x68>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_SPI2_Init+0x68>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_SPI2_Init+0x68>)
 80002f6:	220a      	movs	r2, #10
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_SPI2_Init+0x68>)
 80002fc:	f001 fb4e 	bl	800199c <HAL_SPI_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000306:	f000 f8f5 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000398 	.word	0x20000398
 8000314:	40003800 	.word	0x40003800

08000318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_USART1_UART_Init+0x50>)
 8000320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000350:	f001 fdf2 	bl	8001f38 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035a:	f000 f8cb 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200003f0 	.word	0x200003f0
 8000368:	40013800 	.word	0x40013800

0800036c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART2_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800039c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 80003a6:	f001 fdc7 	bl	8001f38 <HAL_UART_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80003b0:	f000 f8a0 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000434 	.word	0x20000434
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a2d      	ldr	r2, [pc, #180]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a27      	ldr	r2, [pc, #156]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_GPIO_Init+0xd0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_GPIO_Init+0xd0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a21      	ldr	r2, [pc, #132]	; (8000490 <MX_GPIO_Init+0xd0>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_GPIO_Init+0xd0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _74HC595_CLK_Pin|_74HC595_DATA_Pin|_74HC165_LOAD_Pin|OE_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 51c5 	mov.w	r1, #6304	; 0x18a0
 8000422:	481c      	ldr	r0, [pc, #112]	; (8000494 <MX_GPIO_Init+0xd4>)
 8000424:	f000 fcfa 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _74HC595_STORE_Pin|LED_Pin|MCP41010_CS_Pin|_74HC165_CLK_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f241 0113 	movw	r1, #4115	; 0x1013
 800042e:	481a      	ldr	r0, [pc, #104]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000430:	f000 fcf4 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _74HC595_CLK_Pin _74HC595_DATA_Pin _74HC165_LOAD_Pin OE_Pin */
  GPIO_InitStruct.Pin = _74HC595_CLK_Pin|_74HC595_DATA_Pin|_74HC165_LOAD_Pin|OE_Pin;
 8000434:	f44f 53c5 	mov.w	r3, #6304	; 0x18a0
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_GPIO_Init+0xd4>)
 800044e:	f000 fb61 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : _74HC595_STORE_Pin LED_Pin MCP41010_CS_Pin _74HC165_CLK_Pin */
  GPIO_InitStruct.Pin = _74HC595_STORE_Pin|LED_Pin|MCP41010_CS_Pin|_74HC165_CLK_Pin;
 8000452:	f241 0313 	movw	r3, #4115	; 0x1013
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2302      	movs	r3, #2
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <MX_GPIO_Init+0xd8>)
 800046c:	f000 fb52 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : _74HC165_DATA_Pin */
  GPIO_InitStruct.Pin = _74HC165_DATA_Pin;
 8000470:	2308      	movs	r3, #8
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_74HC165_DATA_GPIO_Port, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_GPIO_Init+0xd8>)
 8000484:	f000 fb46 	bl	8000b14 <HAL_GPIO_Init>

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800
 8000498:	40010c00 	.word	0x40010c00

0800049c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(_74HC595_CLK_GPIO_Port, _74HC595_CLK_Pin);
 80004a4:	2120      	movs	r1, #32
 80004a6:	4808      	ldr	r0, [pc, #32]	; (80004c8 <StartDefaultTask+0x2c>)
 80004a8:	f000 fcd0 	bl	8000e4c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(_74HC595_STORE_GPIO_Port, _74HC595_STORE_Pin);
 80004ac:	2101      	movs	r1, #1
 80004ae:	4807      	ldr	r0, [pc, #28]	; (80004cc <StartDefaultTask+0x30>)
 80004b0:	f000 fccc 	bl	8000e4c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(_74HC595_DATA_GPIO_Port, _74HC595_DATA_Pin);
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <StartDefaultTask+0x2c>)
 80004b8:	f000 fcc8 	bl	8000e4c <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f001 fe80 	bl	80021c4 <osDelay>
	  HAL_GPIO_TogglePin(_74HC595_CLK_GPIO_Port, _74HC595_CLK_Pin);
 80004c4:	e7ee      	b.n	80004a4 <StartDefaultTask+0x8>
 80004c6:	bf00      	nop
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d101      	bne.n	80004e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004e2:	f000 fa1b 	bl	800091c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40012c00 	.word	0x40012c00

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <HAL_MspInit+0x68>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <HAL_MspInit+0x68>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_MspInit+0x68>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_MspInit+0x68>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_MspInit+0x68>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x68>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	210f      	movs	r1, #15
 800053a:	f06f 0001 	mvn.w	r0, #1
 800053e:	f000 fabe 	bl	8000abe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_MspInit+0x6c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_MspInit+0x6c>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40010000 	.word	0x40010000

08000570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <HAL_I2C_MspInit+0x70>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d123      	bne.n	80005d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0308 	and.w	r3, r3, #8
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005a8:	23c0      	movs	r3, #192	; 0xc0
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ac:	2312      	movs	r3, #18
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <HAL_I2C_MspInit+0x78>)
 80005bc:	f000 faaa 	bl	8000b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 80005c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ca:	61d3      	str	r3, [r2, #28]
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_I2C_MspInit+0x74>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40005400 	.word	0x40005400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010c00 	.word	0x40010c00

080005ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <HAL_SPI_MspInit+0x74>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d124      	bne.n	8000656 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_SPI_MspInit+0x78>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_SPI_MspInit+0x78>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	61d3      	str	r3, [r2, #28]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_SPI_MspInit+0x78>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_SPI_MspInit+0x78>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_SPI_MspInit+0x78>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_SPI_MspInit+0x78>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MCP41010_CLK_Pin|MCP41010_MOSI_Pin;
 800063c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <HAL_SPI_MspInit+0x7c>)
 8000652:	f000 fa5f 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40003800 	.word	0x40003800
 8000664:	40021000 	.word	0x40021000
 8000668:	40010c00 	.word	0x40010c00

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a37      	ldr	r2, [pc, #220]	; (8000764 <HAL_UART_MspInit+0xf8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d132      	bne.n	80006f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <HAL_UART_MspInit+0xfc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a35      	ldr	r2, [pc, #212]	; (8000768 <HAL_UART_MspInit+0xfc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <HAL_UART_MspInit+0xfc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <HAL_UART_MspInit+0xfc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <HAL_UART_MspInit+0xfc>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <HAL_UART_MspInit+0xfc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STM32_TX_Pin;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STM32_TX_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4619      	mov	r1, r3
 80006d0:	4826      	ldr	r0, [pc, #152]	; (800076c <HAL_UART_MspInit+0x100>)
 80006d2:	f000 fa1f 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM32_RX_Pin;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STM32_RX_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0318 	add.w	r3, r7, #24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4820      	ldr	r0, [pc, #128]	; (800076c <HAL_UART_MspInit+0x100>)
 80006ec:	f000 fa12 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f0:	e034      	b.n	800075c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <HAL_UART_MspInit+0x104>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d12f      	bne.n	800075c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_UART_MspInit+0xfc>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_UART_MspInit+0xfc>)
 8000702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_UART_MspInit+0xfc>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_UART_MspInit+0xfc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <HAL_UART_MspInit+0xfc>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_UART_MspInit+0xfc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_CTR_Pin|RS485_TX_Pin;
 800072c:	2306      	movs	r3, #6
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <HAL_UART_MspInit+0x100>)
 8000740:	f000 f9e8 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8000744:	2308      	movs	r3, #8
 8000746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <HAL_UART_MspInit+0x100>)
 8000758:	f000 f9dc 	bl	8000b14 <HAL_GPIO_Init>
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40013800 	.word	0x40013800
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800
 8000770:	40004400 	.word	0x40004400

08000774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <HAL_InitTick+0xd0>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <HAL_InitTick+0xd0>)
 8000790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <HAL_InitTick+0xd0>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f8a7 	bl	8001900 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007b2:	f001 f891 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 80007b6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <HAL_InitTick+0xd4>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	3b01      	subs	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <HAL_InitTick+0xd8>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <HAL_InitTick+0xdc>)
 80007ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_InitTick+0xd8>)
 80007ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <HAL_InitTick+0xd8>)
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_InitTick+0xd8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <HAL_InitTick+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_InitTick+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <HAL_InitTick+0xd8>)
 80007ee:	f001 f959 	bl	8001aa4 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11b      	bne.n	8000838 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <HAL_InitTick+0xd8>)
 8000802:	f001 f9a7 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800080c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000810:	2b00      	cmp	r3, #0
 8000812:	d111      	bne.n	8000838 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000814:	2019      	movs	r0, #25
 8000816:	f000 f96e 	bl	8000af6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d808      	bhi.n	8000832 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	2019      	movs	r0, #25
 8000826:	f000 f94a 	bl	8000abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_InitTick+0xe0>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e002      	b.n	8000838 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800083c:	4618      	mov	r0, r3
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	431bde83 	.word	0x431bde83
 800084c:	2000047c 	.word	0x2000047c
 8000850:	40012c00 	.word	0x40012c00
 8000854:	20000004 	.word	0x20000004

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM1_UP_IRQHandler+0x10>)
 800088a:	f001 f9b5 	bl	8001bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000047c 	.word	0x2000047c

08000898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ca:	f7ff ffe5 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 fe17 	bl	8003500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fc55 	bl	8000180 <main>
  bx lr
 80008d6:	4770      	bx	lr
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008e0:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 80008e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008e8:	2000121c 	.word	0x2000121c

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f8d1 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff ff34 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fdf8 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	200004c4 	.word	0x200004c4

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	200004c4 	.word	0x200004c4

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4906      	ldr	r1, [pc, #24]	; (80009ec <__NVIC_EnableIRQ+0x34>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff4f 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff64 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ffb2 	bl	8000a44 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff81 	bl	80009f0 <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff57 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e169      	b.n	8000dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8158 	bne.w	8000df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a90      	ldr	r2, [pc, #576]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00d      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d101      	bne.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e004      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	492f      	ldr	r1, [pc, #188]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	492c      	ldr	r1, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4928      	ldr	r1, [pc, #160]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491e      	ldr	r1, [pc, #120]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	490e      	ldr	r1, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x2e2>
 8000db2:	bf00      	nop
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10310000 	.word	0x10310000
 8000dbc:	10220000 	.word	0x10220000
 8000dc0:	10210000 	.word	0x10210000
 8000dc4:	10120000 	.word	0x10120000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4909      	ldr	r1, [pc, #36]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f ae8e 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	372c      	adds	r7, #44	; 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43d9      	mvns	r1, r3
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e12b      	b.n	80010ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fb62 	bl	8000570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ee4:	f000 fce4 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4a81      	ldr	r2, [pc, #516]	; (80010f4 <HAL_I2C_Init+0x274>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d807      	bhi.n	8000f04 <HAL_I2C_Init+0x84>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a80      	ldr	r2, [pc, #512]	; (80010f8 <HAL_I2C_Init+0x278>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	bf94      	ite	ls
 8000efc:	2301      	movls	r3, #1
 8000efe:	2300      	movhi	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	e006      	b.n	8000f12 <HAL_I2C_Init+0x92>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a7d      	ldr	r2, [pc, #500]	; (80010fc <HAL_I2C_Init+0x27c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	bf94      	ite	ls
 8000f0c:	2301      	movls	r3, #1
 8000f0e:	2300      	movhi	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0e7      	b.n	80010ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a78      	ldr	r2, [pc, #480]	; (8001100 <HAL_I2C_Init+0x280>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	; (80010f4 <HAL_I2C_Init+0x274>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d802      	bhi.n	8000f54 <HAL_I2C_Init+0xd4>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3301      	adds	r3, #1
 8000f52:	e009      	b.n	8000f68 <HAL_I2C_Init+0xe8>
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a69      	ldr	r2, [pc, #420]	; (8001104 <HAL_I2C_Init+0x284>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	099b      	lsrs	r3, r3, #6
 8000f66:	3301      	adds	r3, #1
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	495c      	ldr	r1, [pc, #368]	; (80010f4 <HAL_I2C_Init+0x274>)
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d819      	bhi.n	8000fbc <HAL_I2C_Init+0x13c>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1e59      	subs	r1, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00a      	beq.n	8000fb8 <HAL_I2C_Init+0x138>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1e59      	subs	r1, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb6:	e051      	b.n	800105c <HAL_I2C_Init+0x1dc>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e04f      	b.n	800105c <HAL_I2C_Init+0x1dc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d111      	bne.n	8000fe8 <HAL_I2C_Init+0x168>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1e58      	subs	r0, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6859      	ldr	r1, [r3, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	440b      	add	r3, r1
 8000fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf0c      	ite	eq
 8000fe0:	2301      	moveq	r3, #1
 8000fe2:	2300      	movne	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	e012      	b.n	800100e <HAL_I2C_Init+0x18e>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1e58      	subs	r0, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6859      	ldr	r1, [r3, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	0099      	lsls	r1, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_Init+0x196>
 8001012:	2301      	movs	r3, #1
 8001014:	e022      	b.n	800105c <HAL_I2C_Init+0x1dc>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10e      	bne.n	800103c <HAL_I2C_Init+0x1bc>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1e58      	subs	r0, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6859      	ldr	r1, [r3, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	440b      	add	r3, r1
 800102c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001030:	3301      	adds	r3, #1
 8001032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103a:	e00f      	b.n	800105c <HAL_I2C_Init+0x1dc>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1e58      	subs	r0, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6859      	ldr	r1, [r3, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	0099      	lsls	r1, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001052:	3301      	adds	r3, #1
 8001054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	6809      	ldr	r1, [r1, #0]
 8001060:	4313      	orrs	r3, r2
 8001062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69da      	ldr	r2, [r3, #28]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800108a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6911      	ldr	r1, [r2, #16]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68d2      	ldr	r2, [r2, #12]
 8001096:	4311      	orrs	r1, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	430b      	orrs	r3, r1
 800109e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2220      	movs	r2, #32
 80010d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	000186a0 	.word	0x000186a0
 80010f8:	001e847f 	.word	0x001e847f
 80010fc:	003d08ff 	.word	0x003d08ff
 8001100:	431bde83 	.word	0x431bde83
 8001104:	10624dd3 	.word	0x10624dd3

08001108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e272      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8087 	beq.w	8001236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001128:	4b92      	ldr	r3, [pc, #584]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b04      	cmp	r3, #4
 8001132:	d00c      	beq.n	800114e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001134:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d112      	bne.n	8001166 <HAL_RCC_OscConfig+0x5e>
 8001140:	4b8c      	ldr	r3, [pc, #560]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d10b      	bne.n	8001166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114e:	4b89      	ldr	r3, [pc, #548]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d06c      	beq.n	8001234 <HAL_RCC_OscConfig+0x12c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d168      	bne.n	8001234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e24c      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x76>
 8001170:	4b80      	ldr	r3, [pc, #512]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a7f      	ldr	r2, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e02e      	b.n	80011dc <HAL_RCC_OscConfig+0xd4>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x98>
 8001186:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a7a      	ldr	r2, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b78      	ldr	r3, [pc, #480]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a77      	ldr	r2, [pc, #476]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e01d      	b.n	80011dc <HAL_RCC_OscConfig+0xd4>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0xbc>
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a71      	ldr	r2, [pc, #452]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6e      	ldr	r2, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xd4>
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a6a      	ldr	r2, [pc, #424]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a67      	ldr	r2, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fbac 	bl	8000940 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fba8 	bl	8000940 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e200      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0xe4>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fb98 	bl	8000940 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fb94 	bl	8000940 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e1ec      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x10c>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d063      	beq.n	800130a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001242:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800124e:	4b49      	ldr	r3, [pc, #292]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b08      	cmp	r3, #8
 8001258:	d11c      	bne.n	8001294 <HAL_RCC_OscConfig+0x18c>
 800125a:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x176>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e1c0      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4939      	ldr	r1, [pc, #228]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	e03a      	b.n	800130a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb4d 	bl	8000940 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fb49 	bl	8000940 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1a1      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e015      	b.n	800130a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_RCC_OscConfig+0x270>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb2c 	bl	8000940 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fb28 	bl	8000940 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e180      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d03a      	beq.n	800138c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d019      	beq.n	8001352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_RCC_OscConfig+0x274>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7ff fb0c 	bl	8000940 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fb08 	bl	8000940 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e160      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_RCC_OscConfig+0x26c>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 fb08 	bl	8001960 <RCC_Delay>
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_RCC_OscConfig+0x274>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff faf2 	bl	8000940 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	e00f      	b.n	8001380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff faee 	bl	8000940 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d908      	bls.n	8001380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e146      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	42420000 	.word	0x42420000
 800137c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e9      	bne.n	8001360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a6 	beq.w	80014e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b8b      	ldr	r3, [pc, #556]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10d      	bne.n	80013c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a87      	ldr	r2, [pc, #540]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b85      	ldr	r3, [pc, #532]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c2:	2301      	movs	r3, #1
 80013c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <HAL_RCC_OscConfig+0x4c8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x4c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <HAL_RCC_OscConfig+0x4c8>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff faaf 	bl	8000940 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff faab 	bl	8000940 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e103      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x4c8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x312>
 800140c:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	e02d      	b.n	8001476 <HAL_RCC_OscConfig+0x36e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x334>
 8001422:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	e01c      	b.n	8001476 <HAL_RCC_OscConfig+0x36e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x356>
 8001444:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4a60      	ldr	r2, [pc, #384]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a5d      	ldr	r2, [pc, #372]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	e00b      	b.n	8001476 <HAL_RCC_OscConfig+0x36e>
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a5a      	ldr	r2, [pc, #360]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4a57      	ldr	r2, [pc, #348]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 0304 	bic.w	r3, r3, #4
 8001474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d015      	beq.n	80014aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fa5f 	bl	8000940 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fa5b 	bl	8000940 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0b1      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149c:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ee      	beq.n	8001486 <HAL_RCC_OscConfig+0x37e>
 80014a8:	e014      	b.n	80014d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fa49 	bl	8000940 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fa45 	bl	8000940 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e09b      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ee      	bne.n	80014b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a3b      	ldr	r2, [pc, #236]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8087 	beq.w	80015fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d061      	beq.n	80015c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d146      	bne.n	8001592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <HAL_RCC_OscConfig+0x4cc>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa19 	bl	8000940 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fa15 	bl	8000940 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e06d      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d108      	bne.n	800154c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4921      	ldr	r1, [pc, #132]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a19      	ldr	r1, [r3, #32]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	430b      	orrs	r3, r1
 800155e:	491b      	ldr	r1, [pc, #108]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4cc>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff f9e9 	bl	8000940 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f9e5 	bl	8000940 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e03d      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x46a>
 8001590:	e035      	b.n	80015fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_RCC_OscConfig+0x4cc>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff f9d2 	bl	8000940 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f9ce 	bl	8000940 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e026      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x498>
 80015be:	e01e      	b.n	80015fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e019      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x500>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0d0      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001620:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d910      	bls.n	8001650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 0207 	bic.w	r2, r3, #7
 8001636:	4965      	ldr	r1, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800168a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d040      	beq.n	800172c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d115      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e073      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e06b      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f023 0203 	bic.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016fc:	f7ff f920 	bl	8000940 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7ff f91c 	bl	8000940 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e053      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 020c 	and.w	r2, r3, #12
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d1eb      	bne.n	8001704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d210      	bcs.n	800175c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4922      	ldr	r1, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1cc>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1d0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ffda 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08003730 	.word	0x08003730
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	b490      	push	{r4, r7}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_GetSysClockFreq+0xac>)
 80017e8:	1d3c      	adds	r4, r7, #4
 80017ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017f0:	f240 2301 	movw	r3, #513	; 0x201
 80017f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb0>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d002      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 800181a:	2b08      	cmp	r3, #8
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x46>
 800181e:	e02b      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001822:	623b      	str	r3, [r7, #32]
      break;
 8001824:	e02b      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3328      	adds	r3, #40	; 0x28
 8001830:	443b      	add	r3, r7
 8001832:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001836:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0c5b      	lsrs	r3, r3, #17
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	3328      	adds	r3, #40	; 0x28
 800184e:	443b      	add	r3, r7
 8001850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800185a:	fb03 f202 	mul.w	r2, r3, r2
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	e004      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	623b      	str	r3, [r7, #32]
      break;
 8001876:	e002      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800187e:	6a3b      	ldr	r3, [r7, #32]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bc90      	pop	{r4, r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	08003718 	.word	0x08003718
 8001890:	40021000 	.word	0x40021000
 8001894:	007a1200 	.word	0x007a1200
 8001898:	003d0900 	.word	0x003d0900

0800189c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_RCC_GetHCLKFreq+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018b4:	f7ff fff2 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	4903      	ldr	r1, [pc, #12]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08003740 	.word	0x08003740

080018d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018dc:	f7ff ffde 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	0adb      	lsrs	r3, r3, #11
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08003740 	.word	0x08003740

08001900 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	220f      	movs	r2, #15
 800190e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_RCC_GetClockConfig+0x58>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_RCC_GetClockConfig+0x58>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_GetClockConfig+0x58>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_RCC_GetClockConfig+0x58>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_GetClockConfig+0x5c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40022000 	.word	0x40022000

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000000 	.word	0x20000000
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e076      	b.n	8001a9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019be:	d009      	beq.n	80019d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	e005      	b.n	80019d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fdfc 	bl	80005ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	ea42 0103 	orr.w	r1, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	0c1a      	lsrs	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f002 0204 	and.w	r2, r2, #4
 8001a7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e041      	b.n	8001b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f839 	bl	8001b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f000 f9b4 	bl	8001e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e03a      	b.n	8001be2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_TIM_Base_Start_IT+0x98>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x58>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b96:	d009      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x58>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x58>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d010      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bce:	e007      	b.n	8001be0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d122      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d11b      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0202 	mvn.w	r2, #2
 8001c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8ed 	bl	8001e1a <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8e0 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8ef 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0204 	mvn.w	r2, #4
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8c3 	bl	8001e1a <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8b6 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8c5 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0208 	mvn.w	r2, #8
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f899 	bl	8001e1a <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f88c 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f89b 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0210 	mvn.w	r2, #16
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2208      	movs	r2, #8
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f86f 	bl	8001e1a <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f862 	bl	8001e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f871 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0201 	mvn.w	r2, #1
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fbaa 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b80      	cmp	r3, #128	; 0x80
 8001d88:	d10e      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d107      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8bf 	bl	8001f26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b40      	cmp	r3, #64	; 0x40
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d107      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f835 	bl	8001e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d107      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0220 	mvn.w	r2, #32
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f88a 	bl	8001f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <TIM_Base_SetConfig+0xb8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00b      	beq.n	8001e80 <TIM_Base_SetConfig+0x30>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d007      	beq.n	8001e80 <TIM_Base_SetConfig+0x30>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <TIM_Base_SetConfig+0xbc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d003      	beq.n	8001e80 <TIM_Base_SetConfig+0x30>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <TIM_Base_SetConfig+0xc0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <TIM_Base_SetConfig+0xb8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00b      	beq.n	8001eb2 <TIM_Base_SetConfig+0x62>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d007      	beq.n	8001eb2 <TIM_Base_SetConfig+0x62>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <TIM_Base_SetConfig+0xbc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <TIM_Base_SetConfig+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <TIM_Base_SetConfig+0xc0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <TIM_Base_SetConfig+0xb8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d103      	bne.n	8001ef8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800

08001f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e03f      	b.n	8001fca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fb84 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f829 	bl	8001fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800200e:	f023 030c 	bic.w	r3, r3, #12
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	430b      	orrs	r3, r1
 800201a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <UART_SetConfig+0x114>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d103      	bne.n	8002044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800203c:	f7ff fc4c 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	e002      	b.n	800204a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002044:	f7ff fc34 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009a      	lsls	r2, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	4a22      	ldr	r2, [pc, #136]	; (80020ec <UART_SetConfig+0x118>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	0119      	lsls	r1, r3, #4
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009a      	lsls	r2, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <UART_SetConfig+0x118>)
 8002082:	fba3 0302 	umull	r0, r3, r3, r2
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	fb00 f303 	mul.w	r3, r0, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	3332      	adds	r3, #50	; 0x32
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <UART_SetConfig+0x118>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a0:	4419      	add	r1, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <UART_SetConfig+0x118>)
 80020ba:	fba3 0302 	umull	r0, r3, r3, r2
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2064      	movs	r0, #100	; 0x64
 80020c2:	fb00 f303 	mul.w	r3, r0, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <UART_SetConfig+0x118>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	440a      	add	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40013800 	.word	0x40013800
 80020ec:	51eb851f 	.word	0x51eb851f

080020f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	2b84      	cmp	r3, #132	; 0x84
 8002104:	d005      	beq.n	8002112 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002106:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	3303      	adds	r3, #3
 8002110:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002122:	f000 fae7 	bl	80026f4 <vTaskStartScheduler>
  
  return osOK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}

0800212c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af04      	add	r7, sp, #16
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d020      	beq.n	8002180 <osThreadCreate+0x54>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01c      	beq.n	8002180 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685c      	ldr	r4, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681d      	ldr	r5, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691e      	ldr	r6, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ffc9 	bl	80020f0 <makeFreeRtosPriority>
 800215e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	9100      	str	r1, [sp, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4632      	mov	r2, r6
 8002172:	4629      	mov	r1, r5
 8002174:	4620      	mov	r0, r4
 8002176:	f000 f8e8 	bl	800234a <xTaskCreateStatic>
 800217a:	4603      	mov	r3, r0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e01c      	b.n	80021ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685c      	ldr	r4, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800218c:	b29e      	uxth	r6, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffab 	bl	80020f0 <makeFreeRtosPriority>
 800219a:	4602      	mov	r2, r0
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4632      	mov	r2, r6
 80021a8:	4629      	mov	r1, r5
 80021aa:	4620      	mov	r0, r4
 80021ac:	f000 f929 	bl	8002402 <xTaskCreate>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <osDelay+0x16>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	e000      	b.n	80021dc <osDelay+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fa55 	bl	800268c <vTaskDelay>
  
  return osOK;
 80021e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f103 0208 	add.w	r2, r3, #8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f103 0208 	add.w	r2, r3, #8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f103 0208 	add.w	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d103      	bne.n	80022a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e00c      	b.n	80022c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3308      	adds	r3, #8
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e002      	b.n	80022b6 <vListInsert+0x2e>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d2f6      	bcs.n	80022b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6852      	ldr	r2, [r2, #4]
 8002318:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d103      	bne.n	800232c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800234a:	b580      	push	{r7, lr}
 800234c:	b08e      	sub	sp, #56	; 0x38
 800234e:	af04      	add	r7, sp, #16
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002370:	bf00      	nop
 8002372:	e7fe      	b.n	8002372 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <xTaskCreateStatic+0x46>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	61fb      	str	r3, [r7, #28]
}
 800238c:	bf00      	nop
 800238e:	e7fe      	b.n	800238e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002390:	23b4      	movs	r3, #180	; 0xb4
 8002392:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2bb4      	cmp	r3, #180	; 0xb4
 8002398:	d00a      	beq.n	80023b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	61bb      	str	r3, [r7, #24]
}
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01e      	beq.n	80023f4 <xTaskCreateStatic+0xaa>
 80023b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023ce:	2300      	movs	r3, #0
 80023d0:	9303      	str	r3, [sp, #12]
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f850 	bl	800248c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ee:	f000 f8e3 	bl	80025b8 <prvAddNewTaskToReadyList>
 80023f2:	e001      	b.n	80023f8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80023f8:	697b      	ldr	r3, [r7, #20]
	}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002402:	b580      	push	{r7, lr}
 8002404:	b08c      	sub	sp, #48	; 0x30
 8002406:	af04      	add	r7, sp, #16
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fe9a 	bl	8003150 <pvPortMalloc>
 800241c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002424:	20b4      	movs	r0, #180	; 0xb4
 8002426:	f000 fe93 	bl	8003150 <pvPortMalloc>
 800242a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
 8002438:	e005      	b.n	8002446 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f000 ff4c 	bl	80032d8 <vPortFree>
 8002440:	e001      	b.n	8002446 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	2300      	movs	r3, #0
 8002458:	9303      	str	r3, [sp, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f80e 	bl	800248c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002470:	69f8      	ldr	r0, [r7, #28]
 8002472:	f000 f8a1 	bl	80025b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002476:	2301      	movs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e002      	b.n	8002482 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002482:	69bb      	ldr	r3, [r7, #24]
	}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024a4:	3b01      	subs	r3, #1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	617b      	str	r3, [r7, #20]
}
 80024d0:	bf00      	nop
 80024d2:	e7fe      	b.n	80024d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e012      	b.n	8002500 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	7819      	ldrb	r1, [r3, #0]
 80024e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	3334      	adds	r3, #52	; 0x34
 80024ea:	460a      	mov	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d9e9      	bls.n	80024da <prvInitialiseNewTask+0x4e>
 8002506:	e000      	b.n	800250a <prvInitialiseNewTask+0x7e>
		{
			break;
 8002508:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	2b06      	cmp	r3, #6
 8002516:	d901      	bls.n	800251c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002518:	2306      	movs	r3, #6
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	3304      	adds	r3, #4
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fe79 	bl	800222a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	3318      	adds	r3, #24
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fe74 	bl	800222a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	f1c3 0207 	rsb	r2, r3, #7
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	2200      	movs	r2, #0
 800255c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	2200      	movs	r2, #0
 8002564:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	334c      	adds	r3, #76	; 0x4c
 800256c:	2260      	movs	r2, #96	; 0x60
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f000 ffeb 	bl	800354c <memset>
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <prvInitialiseNewTask+0x120>)
 800257a:	651a      	str	r2, [r3, #80]	; 0x50
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <prvInitialiseNewTask+0x124>)
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <prvInitialiseNewTask+0x128>)
 8002586:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	69b8      	ldr	r0, [r7, #24]
 800258e:	f000 fc29 	bl	8002de4 <pxPortInitialiseStack>
 8002592:	4602      	mov	r2, r0
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025a4:	bf00      	nop
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08003768 	.word	0x08003768
 80025b0:	08003788 	.word	0x08003788
 80025b4:	08003748 	.word	0x08003748

080025b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025c0:	f000 fd04 	bl	8002fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <prvAddNewTaskToReadyList+0xb8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a29      	ldr	r2, [pc, #164]	; (8002670 <prvAddNewTaskToReadyList+0xb8>)
 80025cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <prvAddNewTaskToReadyList+0xbc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <prvAddNewTaskToReadyList+0xbc>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <prvAddNewTaskToReadyList+0xb8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d110      	bne.n	8002606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025e4:	f000 fad2 	bl	8002b8c <prvInitialiseTaskLists>
 80025e8:	e00d      	b.n	8002606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <prvAddNewTaskToReadyList+0xc0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <prvAddNewTaskToReadyList+0xbc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d802      	bhi.n	8002606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002600:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <prvAddNewTaskToReadyList+0xbc>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <prvAddNewTaskToReadyList+0xc4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <prvAddNewTaskToReadyList+0xc4>)
 800260e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <prvAddNewTaskToReadyList+0xc8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <prvAddNewTaskToReadyList+0xc8>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <prvAddNewTaskToReadyList+0xcc>)
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7ff fe02 	bl	8002242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800263e:	f000 fcf5 	bl	800302c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <prvAddNewTaskToReadyList+0xc0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <prvAddNewTaskToReadyList+0xbc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <prvAddNewTaskToReadyList+0xd0>)
 800265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200005c8 	.word	0x200005c8
 8002674:	200004c8 	.word	0x200004c8
 8002678:	200005d4 	.word	0x200005d4
 800267c:	200005e4 	.word	0x200005e4
 8002680:	200005d0 	.word	0x200005d0
 8002684:	200004cc 	.word	0x200004cc
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <vTaskDelay+0x60>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <vTaskDelay+0x30>
	__asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	60bb      	str	r3, [r7, #8]
}
 80026b8:	bf00      	nop
 80026ba:	e7fe      	b.n	80026ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80026bc:	f000 f884 	bl	80027c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026c0:	2100      	movs	r1, #0
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fb28 	bl	8002d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026c8:	f000 f88c 	bl	80027e4 <xTaskResumeAll>
 80026cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <vTaskDelay+0x64>)
 80026d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200005f0 	.word	0x200005f0
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002702:	463a      	mov	r2, r7
 8002704:	1d39      	adds	r1, r7, #4
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fd20 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	9202      	str	r2, [sp, #8]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	460a      	mov	r2, r1
 8002722:	4921      	ldr	r1, [pc, #132]	; (80027a8 <vTaskStartScheduler+0xb4>)
 8002724:	4821      	ldr	r0, [pc, #132]	; (80027ac <vTaskStartScheduler+0xb8>)
 8002726:	f7ff fe10 	bl	800234a <xTaskCreateStatic>
 800272a:	4603      	mov	r3, r0
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <vTaskStartScheduler+0xbc>)
 800272e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <vTaskStartScheduler+0xbc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e001      	b.n	8002742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d11b      	bne.n	8002780 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	613b      	str	r3, [r7, #16]
}
 800275a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <vTaskStartScheduler+0xc0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	334c      	adds	r3, #76	; 0x4c
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <vTaskStartScheduler+0xc4>)
 8002764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <vTaskStartScheduler+0xc8>)
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <vTaskStartScheduler+0xcc>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <vTaskStartScheduler+0xd0>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800277a:	f000 fbb5 	bl	8002ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800277e:	e00e      	b.n	800279e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d10a      	bne.n	800279e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	60fb      	str	r3, [r7, #12]
}
 800279a:	bf00      	nop
 800279c:	e7fe      	b.n	800279c <vTaskStartScheduler+0xa8>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08003728 	.word	0x08003728
 80027ac:	08002b5d 	.word	0x08002b5d
 80027b0:	200005ec 	.word	0x200005ec
 80027b4:	200004c8 	.word	0x200004c8
 80027b8:	20000010 	.word	0x20000010
 80027bc:	200005e8 	.word	0x200005e8
 80027c0:	200005d4 	.word	0x200005d4
 80027c4:	200005cc 	.word	0x200005cc

080027c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <vTaskSuspendAll+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <vTaskSuspendAll+0x18>)
 80027d4:	6013      	str	r3, [r2, #0]
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200005f0 	.word	0x200005f0

080027e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <xTaskResumeAll+0x114>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <xTaskResumeAll+0x2c>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	603b      	str	r3, [r7, #0]
}
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002810:	f000 fbdc 	bl	8002fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <xTaskResumeAll+0x114>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <xTaskResumeAll+0x114>)
 800281c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <xTaskResumeAll+0x114>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d161      	bne.n	80028ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <xTaskResumeAll+0x118>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05d      	beq.n	80028ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800282e:	e02e      	b.n	800288e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <xTaskResumeAll+0x11c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3318      	adds	r3, #24
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fd5b 	bl	80022f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3304      	adds	r3, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fd56 	bl	80022f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <xTaskResumeAll+0x120>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4313      	orrs	r3, r2
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <xTaskResumeAll+0x120>)
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4a27      	ldr	r2, [pc, #156]	; (8002908 <xTaskResumeAll+0x124>)
 800286c:	441a      	add	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f7ff fce4 	bl	8002242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <xTaskResumeAll+0x128>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <xTaskResumeAll+0x12c>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <xTaskResumeAll+0x11c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1cc      	bne.n	8002830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800289c:	f000 fa18 	bl	8002cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <xTaskResumeAll+0x130>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028ac:	f000 f836 	bl	800291c <xTaskIncrementTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <xTaskResumeAll+0x12c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f1      	bne.n	80028ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <xTaskResumeAll+0x130>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <xTaskResumeAll+0x12c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <xTaskResumeAll+0x134>)
 80028dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028ea:	f000 fb9f 	bl	800302c <vPortExitCritical>

	return xAlreadyYielded;
 80028ee:	68bb      	ldr	r3, [r7, #8]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200005f0 	.word	0x200005f0
 80028fc:	200005c8 	.word	0x200005c8
 8002900:	20000588 	.word	0x20000588
 8002904:	200005d0 	.word	0x200005d0
 8002908:	200004cc 	.word	0x200004cc
 800290c:	200004c8 	.word	0x200004c8
 8002910:	200005dc 	.word	0x200005dc
 8002914:	200005d8 	.word	0x200005d8
 8002918:	e000ed04 	.word	0xe000ed04

0800291c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <xTaskIncrementTick+0x150>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 808d 	bne.w	8002a4a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002930:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <xTaskIncrementTick+0x154>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <xTaskIncrementTick+0x154>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d120      	bne.n	8002986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002944:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <xTaskIncrementTick+0x158>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <xTaskIncrementTick+0x48>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	603b      	str	r3, [r7, #0]
}
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xTaskIncrementTick+0x46>
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <xTaskIncrementTick+0x158>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <xTaskIncrementTick+0x15c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a41      	ldr	r2, [pc, #260]	; (8002a74 <xTaskIncrementTick+0x158>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4a41      	ldr	r2, [pc, #260]	; (8002a78 <xTaskIncrementTick+0x15c>)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <xTaskIncrementTick+0x160>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <xTaskIncrementTick+0x160>)
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	f000 f9a5 	bl	8002cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <xTaskIncrementTick+0x164>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d34d      	bcc.n	8002a2c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <xTaskIncrementTick+0x158>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <xTaskIncrementTick+0x82>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xTaskIncrementTick+0x84>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <xTaskIncrementTick+0x164>)
 80029a6:	f04f 32ff 	mov.w	r2, #4294967295
 80029aa:	601a      	str	r2, [r3, #0]
					break;
 80029ac:	e03e      	b.n	8002a2c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <xTaskIncrementTick+0x158>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d203      	bcs.n	80029ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029c6:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <xTaskIncrementTick+0x164>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]
						break;
 80029cc:	e02e      	b.n	8002a2c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fc90 	bl	80022f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3318      	adds	r3, #24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fc87 	bl	80022f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	2201      	movs	r2, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <xTaskIncrementTick+0x168>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <xTaskIncrementTick+0x168>)
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <xTaskIncrementTick+0x16c>)
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7ff fc15 	bl	8002242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <xTaskIncrementTick+0x170>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b4      	bcc.n	8002990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2a:	e7b1      	b.n	8002990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <xTaskIncrementTick+0x170>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	4915      	ldr	r1, [pc, #84]	; (8002a88 <xTaskIncrementTick+0x16c>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d907      	bls.n	8002a54 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e004      	b.n	8002a54 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <xTaskIncrementTick+0x174>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <xTaskIncrementTick+0x174>)
 8002a52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <xTaskIncrementTick+0x178>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a60:	697b      	ldr	r3, [r7, #20]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200005f0 	.word	0x200005f0
 8002a70:	200005cc 	.word	0x200005cc
 8002a74:	20000580 	.word	0x20000580
 8002a78:	20000584 	.word	0x20000584
 8002a7c:	200005e0 	.word	0x200005e0
 8002a80:	200005e8 	.word	0x200005e8
 8002a84:	200005d0 	.word	0x200005d0
 8002a88:	200004cc 	.word	0x200004cc
 8002a8c:	200004c8 	.word	0x200004c8
 8002a90:	200005d8 	.word	0x200005d8
 8002a94:	200005dc 	.word	0x200005dc

08002a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <vTaskSwitchContext+0xac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <vTaskSwitchContext+0xb0>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002aac:	e044      	b.n	8002b38 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <vTaskSwitchContext+0xb0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <vTaskSwitchContext+0xb4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f1c3 031f 	rsb	r3, r3, #31
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	4921      	ldr	r1, [pc, #132]	; (8002b50 <vTaskSwitchContext+0xb8>)
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <vTaskSwitchContext+0x5a>
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <vTaskSwitchContext+0xb8>)
 8002b00:	4413      	add	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	3308      	adds	r3, #8
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d104      	bne.n	8002b24 <vTaskSwitchContext+0x8c>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <vTaskSwitchContext+0xbc>)
 8002b2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <vTaskSwitchContext+0xbc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	334c      	adds	r3, #76	; 0x4c
 8002b34:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <vTaskSwitchContext+0xc0>)
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200005f0 	.word	0x200005f0
 8002b48:	200005dc 	.word	0x200005dc
 8002b4c:	200005d0 	.word	0x200005d0
 8002b50:	200004cc 	.word	0x200004cc
 8002b54:	200004c8 	.word	0x200004c8
 8002b58:	20000010 	.word	0x20000010

08002b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b64:	f000 f852 	bl	8002c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <prvIdleTask+0x28>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d9f9      	bls.n	8002b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <prvIdleTask+0x2c>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b80:	e7f0      	b.n	8002b64 <prvIdleTask+0x8>
 8002b82:	bf00      	nop
 8002b84:	200004cc 	.word	0x200004cc
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	e00c      	b.n	8002bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <prvInitialiseTaskLists+0x60>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fb20 	bl	80021ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d9ef      	bls.n	8002b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <prvInitialiseTaskLists+0x64>)
 8002bba:	f7ff fb17 	bl	80021ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bbe:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <prvInitialiseTaskLists+0x68>)
 8002bc0:	f7ff fb14 	bl	80021ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <prvInitialiseTaskLists+0x6c>)
 8002bc6:	f7ff fb11 	bl	80021ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bca:	480c      	ldr	r0, [pc, #48]	; (8002bfc <prvInitialiseTaskLists+0x70>)
 8002bcc:	f7ff fb0e 	bl	80021ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bd0:	480b      	ldr	r0, [pc, #44]	; (8002c00 <prvInitialiseTaskLists+0x74>)
 8002bd2:	f7ff fb0b 	bl	80021ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <prvInitialiseTaskLists+0x78>)
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <prvInitialiseTaskLists+0x64>)
 8002bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <prvInitialiseTaskLists+0x7c>)
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <prvInitialiseTaskLists+0x68>)
 8002be0:	601a      	str	r2, [r3, #0]
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200004cc 	.word	0x200004cc
 8002bf0:	20000558 	.word	0x20000558
 8002bf4:	2000056c 	.word	0x2000056c
 8002bf8:	20000588 	.word	0x20000588
 8002bfc:	2000059c 	.word	0x2000059c
 8002c00:	200005b4 	.word	0x200005b4
 8002c04:	20000580 	.word	0x20000580
 8002c08:	20000584 	.word	0x20000584

08002c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c12:	e019      	b.n	8002c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c14:	f000 f9da 	bl	8002fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <prvCheckTasksWaitingTermination+0x50>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fb67 	bl	80022f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <prvCheckTasksWaitingTermination+0x54>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <prvCheckTasksWaitingTermination+0x54>)
 8002c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <prvCheckTasksWaitingTermination+0x58>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <prvCheckTasksWaitingTermination+0x58>)
 8002c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c3e:	f000 f9f5 	bl	800302c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f810 	bl	8002c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <prvCheckTasksWaitingTermination+0x58>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e1      	bne.n	8002c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000059c 	.word	0x2000059c
 8002c60:	200005c8 	.word	0x200005c8
 8002c64:	200005b0 	.word	0x200005b0

08002c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	334c      	adds	r3, #76	; 0x4c
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fc7f 	bl	8003578 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fb25 	bl	80032d8 <vPortFree>
				vPortFree( pxTCB );
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fb22 	bl	80032d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c94:	e018      	b.n	8002cc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d103      	bne.n	8002ca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fb19 	bl	80032d8 <vPortFree>
	}
 8002ca6:	e00f      	b.n	8002cc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d00a      	beq.n	8002cc8 <prvDeleteTCB+0x60>
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	60fb      	str	r3, [r7, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <prvDeleteTCB+0x5e>
	}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <prvResetNextTaskUnblockTime+0x40>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <prvResetNextTaskUnblockTime+0x14>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <prvResetNextTaskUnblockTime+0x16>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <prvResetNextTaskUnblockTime+0x44>)
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cf2:	e008      	b.n	8002d06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <prvResetNextTaskUnblockTime+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <prvResetNextTaskUnblockTime+0x44>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	20000580 	.word	0x20000580
 8002d14:	200005e8 	.word	0x200005e8

08002d18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fae2 	bl	80022f8 <uxListRemove>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	2201      	movs	r2, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d10a      	bne.n	8002d70 <prvAddCurrentTaskToDelayedList+0x58>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	481a      	ldr	r0, [pc, #104]	; (8002dd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d6a:	f7ff fa6a 	bl	8002242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d6e:	e026      	b.n	8002dbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d209      	bcs.n	8002d9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7ff fa77 	bl	8002288 <vListInsert>
}
 8002d9a:	e010      	b.n	8002dbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3304      	adds	r3, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f7ff fa6d 	bl	8002288 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d202      	bcs.n	8002dbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200005cc 	.word	0x200005cc
 8002dcc:	200004c8 	.word	0x200004c8
 8002dd0:	200005d0 	.word	0x200005d0
 8002dd4:	200005b4 	.word	0x200005b4
 8002dd8:	20000584 	.word	0x20000584
 8002ddc:	20000580 	.word	0x20000580
 8002de0:	200005e8 	.word	0x200005e8

08002de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b04      	subs	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3b04      	subs	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e14:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <pxPortInitialiseStack+0x54>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b14      	subs	r3, #20
 8002e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b20      	subs	r3, #32
 8002e2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	08002e3d 	.word	0x08002e3d

08002e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <prvTaskExitError+0x54>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d00a      	beq.n	8002e66 <prvTaskExitError+0x2a>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60fb      	str	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <prvTaskExitError+0x28>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60bb      	str	r3, [r7, #8]
}
 8002e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e7a:	bf00      	nop
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0fc      	beq.n	8002e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c
	...

08002ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <pxCurrentTCBConst2>)
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002eaa:	f380 8809 	msr	PSP, r0
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f380 8811 	msr	BASEPRI, r0
 8002eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8002ebe:	4770      	bx	lr

08002ec0 <pxCurrentTCBConst2>:
 8002ec0:	200004c8 	.word	0x200004c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop

08002ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002ec8:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <prvPortStartFirstTask+0x1c>)
 8002eca:	6800      	ldr	r0, [r0, #0]
 8002ecc:	6800      	ldr	r0, [r0, #0]
 8002ece:	f380 8808 	msr	MSP, r0
 8002ed2:	b662      	cpsie	i
 8002ed4:	b661      	cpsie	f
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	df00      	svc	0
 8002ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed08 	.word	0xe000ed08

08002ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <xPortStartScheduler+0xd0>)
 8002ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <xPortStartScheduler+0xd4>)
 8002f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f1c:	e009      	b.n	8002f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002f1e:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d0ef      	beq.n	8002f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d00a      	beq.n	8002f60 <xPortStartScheduler+0x78>
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	60bb      	str	r3, [r7, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	e7fe      	b.n	8002f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <xPortStartScheduler+0xd8>)
 8002f74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <xPortStartScheduler+0xdc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <xPortStartScheduler+0xdc>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <xPortStartScheduler+0xdc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <xPortStartScheduler+0xdc>)
 8002f90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f96:	f000 f8b9 	bl	800310c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <xPortStartScheduler+0xe0>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002fa0:	f7ff ff92 	bl	8002ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002fa4:	f7ff fd78 	bl	8002a98 <vTaskSwitchContext>
	prvTaskExitError();
 8002fa8:	f7ff ff48 	bl	8002e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000e400 	.word	0xe000e400
 8002fbc:	200005f4 	.word	0x200005f4
 8002fc0:	200005f8 	.word	0x200005f8
 8002fc4:	e000ed20 	.word	0xe000ed20
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
}
 8002fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <vPortEnterCritical+0x58>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <vPortEnterCritical+0x58>)
 8002fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <vPortEnterCritical+0x58>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10f      	bne.n	8003018 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <vPortEnterCritical+0x5c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <vPortEnterCritical+0x4c>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	603b      	str	r3, [r7, #0]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vPortEnterCritical+0x4a>
	}
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <vPortExitCritical+0x4c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <vPortExitCritical+0x24>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	607b      	str	r3, [r7, #4]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <vPortExitCritical+0x4c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3b01      	subs	r3, #1
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <vPortExitCritical+0x4c>)
 8003058:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <vPortExitCritical+0x4c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <vPortExitCritical+0x42>
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800306c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	2000000c 	.word	0x2000000c
 800307c:	00000000 	.word	0x00000000

08003080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003080:	f3ef 8009 	mrs	r0, PSP
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <pxCurrentTCBConst>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003090:	6010      	str	r0, [r2, #0]
 8003092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003096:	f04f 0050 	mov.w	r0, #80	; 0x50
 800309a:	f380 8811 	msr	BASEPRI, r0
 800309e:	f7ff fcfb 	bl	8002a98 <vTaskSwitchContext>
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f380 8811 	msr	BASEPRI, r0
 80030aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030b6:	f380 8809 	msr	PSP, r0
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	4770      	bx	lr

080030c0 <pxCurrentTCBConst>:
 80030c0:	200004c8 	.word	0x200004c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop

080030c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	607b      	str	r3, [r7, #4]
}
 80030e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030e2:	f7ff fc1b 	bl	800291c <xTaskIncrementTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <SysTick_Handler+0x40>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f383 8811 	msr	BASEPRI, r3
}
 80030fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <vPortSetupTimerInterrupt+0x30>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <vPortSetupTimerInterrupt+0x34>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <vPortSetupTimerInterrupt+0x38>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a09      	ldr	r2, [pc, #36]	; (8003148 <vPortSetupTimerInterrupt+0x3c>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <vPortSetupTimerInterrupt+0x40>)
 800312a:	3b01      	subs	r3, #1
 800312c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <vPortSetupTimerInterrupt+0x30>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	e000e010 	.word	0xe000e010
 8003140:	e000e018 	.word	0xe000e018
 8003144:	20000000 	.word	0x20000000
 8003148:	10624dd3 	.word	0x10624dd3
 800314c:	e000e014 	.word	0xe000e014

08003150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800315c:	f7ff fb34 	bl	80027c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <pvPortMalloc+0x174>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003168:	f000 f910 	bl	800338c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <pvPortMalloc+0x178>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 808e 	bne.w	8003296 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01d      	beq.n	80031bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003180:	2208      	movs	r2, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	2b00      	cmp	r3, #0
 8003190:	d014      	beq.n	80031bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	3308      	adds	r3, #8
 800319a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <pvPortMalloc+0x6c>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	617b      	str	r3, [r7, #20]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d069      	beq.n	8003296 <pvPortMalloc+0x146>
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <pvPortMalloc+0x17c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d864      	bhi.n	8003296 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031cc:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <pvPortMalloc+0x180>)
 80031ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031d0:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <pvPortMalloc+0x180>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031d6:	e004      	b.n	80031e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d903      	bls.n	80031f4 <pvPortMalloc+0xa4>
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f1      	bne.n	80031d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031f4:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <pvPortMalloc+0x174>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d04b      	beq.n	8003296 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2208      	movs	r2, #8
 8003204:	4413      	add	r3, r2
 8003206:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	2308      	movs	r3, #8
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	429a      	cmp	r2, r3
 800321e:	d91f      	bls.n	8003260 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <pvPortMalloc+0xf8>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	613b      	str	r3, [r7, #16]
}
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800325a:	69b8      	ldr	r0, [r7, #24]
 800325c:	f000 f8f8 	bl	8003450 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <pvPortMalloc+0x17c>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <pvPortMalloc+0x17c>)
 800326c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <pvPortMalloc+0x17c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <pvPortMalloc+0x184>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d203      	bcs.n	8003282 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <pvPortMalloc+0x17c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <pvPortMalloc+0x184>)
 8003280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <pvPortMalloc+0x178>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	431a      	orrs	r2, r3
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003296:	f7ff faa5 	bl	80027e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <pvPortMalloc+0x16a>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	60fb      	str	r3, [r7, #12]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <pvPortMalloc+0x168>
	return pvReturn;
 80032ba:	69fb      	ldr	r3, [r7, #28]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20001204 	.word	0x20001204
 80032c8:	20001210 	.word	0x20001210
 80032cc:	20001208 	.word	0x20001208
 80032d0:	200011fc 	.word	0x200011fc
 80032d4:	2000120c 	.word	0x2000120c

080032d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d048      	beq.n	800337c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032ea:	2308      	movs	r3, #8
 80032ec:	425b      	negs	r3, r3
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4413      	add	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <vPortFree+0xac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <vPortFree+0x44>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	60fb      	str	r3, [r7, #12]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <vPortFree+0x62>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60bb      	str	r3, [r7, #8]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <vPortFree+0xac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d019      	beq.n	800337c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d115      	bne.n	800337c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <vPortFree+0xac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	43db      	mvns	r3, r3
 800335a:	401a      	ands	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003360:	f7ff fa32 	bl	80027c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <vPortFree+0xb0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	4a06      	ldr	r2, [pc, #24]	; (8003388 <vPortFree+0xb0>)
 8003370:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f000 f86c 	bl	8003450 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003378:	f7ff fa34 	bl	80027e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20001210 	.word	0x20001210
 8003388:	20001208 	.word	0x20001208

0800338c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003392:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003396:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <prvHeapInit+0xac>)
 800339a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3307      	adds	r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0307 	bic.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <prvHeapInit+0xac>)
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <prvHeapInit+0xb0>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <prvHeapInit+0xb0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4413      	add	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80033d8:	2208      	movs	r2, #8
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <prvHeapInit+0xb4>)
 80033ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <prvHeapInit+0xb4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <prvHeapInit+0xb4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	1ad2      	subs	r2, r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <prvHeapInit+0xb4>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <prvHeapInit+0xb8>)
 800341a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <prvHeapInit+0xbc>)
 8003422:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <prvHeapInit+0xc0>)
 8003426:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	200005fc 	.word	0x200005fc
 800343c:	200011fc 	.word	0x200011fc
 8003440:	20001204 	.word	0x20001204
 8003444:	2000120c 	.word	0x2000120c
 8003448:	20001208 	.word	0x20001208
 800344c:	20001210 	.word	0x20001210

08003450 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <prvInsertBlockIntoFreeList+0xa8>)
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e002      	b.n	8003464 <prvInsertBlockIntoFreeList+0x14>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d8f7      	bhi.n	800345e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d108      	bne.n	8003492 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	441a      	add	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d118      	bne.n	80034d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <prvInsertBlockIntoFreeList+0xac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d00d      	beq.n	80034ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e008      	b.n	80034e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <prvInsertBlockIntoFreeList+0xac>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e003      	b.n	80034e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d002      	beq.n	80034ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	200011fc 	.word	0x200011fc
 80034fc:	20001204 	.word	0x20001204

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	2600      	movs	r6, #0
 8003504:	4d0c      	ldr	r5, [pc, #48]	; (8003538 <__libc_init_array+0x38>)
 8003506:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	42a6      	cmp	r6, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	f000 f8e2 	bl	80036d8 <_init>
 8003514:	2600      	movs	r6, #0
 8003516:	4d0a      	ldr	r5, [pc, #40]	; (8003540 <__libc_init_array+0x40>)
 8003518:	4c0a      	ldr	r4, [pc, #40]	; (8003544 <__libc_init_array+0x44>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	42a6      	cmp	r6, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f855 3b04 	ldr.w	r3, [r5], #4
 8003528:	4798      	blx	r3
 800352a:	3601      	adds	r6, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003532:	4798      	blx	r3
 8003534:	3601      	adds	r6, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	080037a8 	.word	0x080037a8
 800353c:	080037a8 	.word	0x080037a8
 8003540:	080037a8 	.word	0x080037a8
 8003544:	080037ac 	.word	0x080037ac

08003548 <__retarget_lock_acquire_recursive>:
 8003548:	4770      	bx	lr

0800354a <__retarget_lock_release_recursive>:
 800354a:	4770      	bx	lr

0800354c <memset>:
 800354c:	4603      	mov	r3, r0
 800354e:	4402      	add	r2, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <cleanup_glue>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	460c      	mov	r4, r1
 8003560:	6809      	ldr	r1, [r1, #0]
 8003562:	4605      	mov	r5, r0
 8003564:	b109      	cbz	r1, 800356a <cleanup_glue+0xe>
 8003566:	f7ff fff9 	bl	800355c <cleanup_glue>
 800356a:	4621      	mov	r1, r4
 800356c:	4628      	mov	r0, r5
 800356e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003572:	f000 b869 	b.w	8003648 <_free_r>
	...

08003578 <_reclaim_reent>:
 8003578:	4b2c      	ldr	r3, [pc, #176]	; (800362c <_reclaim_reent+0xb4>)
 800357a:	b570      	push	{r4, r5, r6, lr}
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4604      	mov	r4, r0
 8003580:	4283      	cmp	r3, r0
 8003582:	d051      	beq.n	8003628 <_reclaim_reent+0xb0>
 8003584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003586:	b143      	cbz	r3, 800359a <_reclaim_reent+0x22>
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d14a      	bne.n	8003624 <_reclaim_reent+0xac>
 800358e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	b111      	cbz	r1, 800359a <_reclaim_reent+0x22>
 8003594:	4620      	mov	r0, r4
 8003596:	f000 f857 	bl	8003648 <_free_r>
 800359a:	6961      	ldr	r1, [r4, #20]
 800359c:	b111      	cbz	r1, 80035a4 <_reclaim_reent+0x2c>
 800359e:	4620      	mov	r0, r4
 80035a0:	f000 f852 	bl	8003648 <_free_r>
 80035a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035a6:	b111      	cbz	r1, 80035ae <_reclaim_reent+0x36>
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 f84d 	bl	8003648 <_free_r>
 80035ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035b0:	b111      	cbz	r1, 80035b8 <_reclaim_reent+0x40>
 80035b2:	4620      	mov	r0, r4
 80035b4:	f000 f848 	bl	8003648 <_free_r>
 80035b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035ba:	b111      	cbz	r1, 80035c2 <_reclaim_reent+0x4a>
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 f843 	bl	8003648 <_free_r>
 80035c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035c4:	b111      	cbz	r1, 80035cc <_reclaim_reent+0x54>
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 f83e 	bl	8003648 <_free_r>
 80035cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80035ce:	b111      	cbz	r1, 80035d6 <_reclaim_reent+0x5e>
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 f839 	bl	8003648 <_free_r>
 80035d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80035d8:	b111      	cbz	r1, 80035e0 <_reclaim_reent+0x68>
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 f834 	bl	8003648 <_free_r>
 80035e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e2:	b111      	cbz	r1, 80035ea <_reclaim_reent+0x72>
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f82f 	bl	8003648 <_free_r>
 80035ea:	69a3      	ldr	r3, [r4, #24]
 80035ec:	b1e3      	cbz	r3, 8003628 <_reclaim_reent+0xb0>
 80035ee:	4620      	mov	r0, r4
 80035f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035f2:	4798      	blx	r3
 80035f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80035f6:	b1b9      	cbz	r1, 8003628 <_reclaim_reent+0xb0>
 80035f8:	4620      	mov	r0, r4
 80035fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035fe:	f7ff bfad 	b.w	800355c <cleanup_glue>
 8003602:	5949      	ldr	r1, [r1, r5]
 8003604:	b941      	cbnz	r1, 8003618 <_reclaim_reent+0xa0>
 8003606:	3504      	adds	r5, #4
 8003608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800360a:	2d80      	cmp	r5, #128	; 0x80
 800360c:	68d9      	ldr	r1, [r3, #12]
 800360e:	d1f8      	bne.n	8003602 <_reclaim_reent+0x8a>
 8003610:	4620      	mov	r0, r4
 8003612:	f000 f819 	bl	8003648 <_free_r>
 8003616:	e7ba      	b.n	800358e <_reclaim_reent+0x16>
 8003618:	680e      	ldr	r6, [r1, #0]
 800361a:	4620      	mov	r0, r4
 800361c:	f000 f814 	bl	8003648 <_free_r>
 8003620:	4631      	mov	r1, r6
 8003622:	e7ef      	b.n	8003604 <_reclaim_reent+0x8c>
 8003624:	2500      	movs	r5, #0
 8003626:	e7ef      	b.n	8003608 <_reclaim_reent+0x90>
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	bf00      	nop
 800362c:	20000010 	.word	0x20000010

08003630 <__malloc_lock>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__malloc_lock+0x8>)
 8003632:	f7ff bf89 	b.w	8003548 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	20001214 	.word	0x20001214

0800363c <__malloc_unlock>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__malloc_unlock+0x8>)
 800363e:	f7ff bf84 	b.w	800354a <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	20001214 	.word	0x20001214

08003648 <_free_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4605      	mov	r5, r0
 800364c:	2900      	cmp	r1, #0
 800364e:	d040      	beq.n	80036d2 <_free_r+0x8a>
 8003650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003654:	1f0c      	subs	r4, r1, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	18e4      	addlt	r4, r4, r3
 800365c:	f7ff ffe8 	bl	8003630 <__malloc_lock>
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <_free_r+0x8c>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x2c>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	4628      	mov	r0, r5
 800366c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003670:	f7ff bfe4 	b.w	800363c <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x42>
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	1821      	adds	r1, r4, r0
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1809      	addeq	r1, r1, r0
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x1e>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x4c>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x42>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1850      	adds	r0, r2, r1
 8003698:	42a0      	cmp	r0, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x6c>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	4401      	add	r1, r0
 80036a0:	1850      	adds	r0, r2, r1
 80036a2:	4283      	cmp	r3, r0
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x22>
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4401      	add	r1, r0
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	6053      	str	r3, [r2, #4]
 80036b2:	e7da      	b.n	800366a <_free_r+0x22>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x74>
 80036b6:	230c      	movs	r3, #12
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x22>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	1821      	adds	r1, r4, r0
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf01      	itttt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	1809      	addeq	r1, r1, r0
 80036ca:	6021      	streq	r1, [r4, #0]
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	6054      	str	r4, [r2, #4]
 80036d0:	e7cb      	b.n	800366a <_free_r+0x22>
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	20001218 	.word	0x20001218

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
